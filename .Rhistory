#convert Date and Time columns from factor class to time and data classes
data$Time <- strptime(paste(data$Date,data$Time),
format='%d/%m/%Y %H:%M:%S',
tz='GMT')
data$Date <- as.Date(data$Date,format='%d/%m/%Y')
#Plotting
plotting4 <- function(){
par(mfrow=c(2,2))
#1st subplot
plot(data$Time,
data$Global_active_power,
type='l',
main = "",
xlab="",
ylab="Global Active Power (kilowatts)",
)
#2nd sublot
plot(data$Time,data$Voltage,
type='l',
main = "",
xlab="datetime",
ylab="Voltage",
)
#3d subplot
plot(data$Time,data$Sub_metering_1,
type='l',
main = "",
xlab="",
ylab="Energy of sub metering",
)
lines(data$Time,data$Sub_metering_2,
col='red')
lines(data$Time,data$Sub_metering_3,
col='blue')
legend('topright',
c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col=c("black","red","blue"),
lty=1
)
#4th subplot
plot(data$Time,data$Global_reactive_power,
type='l',
main = "",
xlab="datetime",
ylab="Global_reactive_power",
)
}
#Saving plot
png(filename="Plot4.png",
bg='transparent' #make backround transparent like in example figures
)
plotting4()
dev.off()
dev.off()
dev.off()
dev.off()
plotting4()
dev.off()
setwd('~/ExData_Plotting1')
if (Sys.getlocale('LC_TIME')=='ru_RU.UTF-8'){
# needed to print time axis in english language, tested only on Ubuntu 12.04
Sys.setlocale("LC_TIME", "C")
}
#loading data set which is placed one level upper
data <- read.table('../household_power_consumption.txt',
sep=';',
header=TRUE,
na.strings='?',
as.is=c('Date','Time')) #without this R will convert Date and Time to factor variables
#subset data here to make Date&Time data class converting little bit faster
data <- subset(data,Date %in% c('1/2/2007','2/2/2007'))
#convert Date and Time columns from factor class to time and data classes
data$Time <- strptime(paste(data$Date,data$Time),
format='%d/%m/%Y %H:%M:%S',
tz='GMT')
data$Date <- as.Date(data$Date,format='%d/%m/%Y')
#Plotting
plotting4 <- function(){
par(mfrow=c(2,2))
#1st subplot
plot(data$Time,
data$Global_active_power,
type='l',
main = "",
xlab="",
ylab="Global Active Power (kilowatts)",
)
#2nd sublot
plot(data$Time,data$Voltage,
type='l',
main = "",
xlab="datetime",
ylab="Voltage",
)
#3d subplot
plot(data$Time,data$Sub_metering_1,
type='l',
main = "",
xlab="",
ylab="Energy of sub metering",
)
lines(data$Time,data$Sub_metering_2,
col='red')
lines(data$Time,data$Sub_metering_3,
col='blue')
legend('topright',
c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col=c("black","red","blue"),
lty=1,
bty = "n"
)
#4th subplot
plot(data$Time,data$Global_reactive_power,
type='l',
main = "",
xlab="datetime",
ylab="Global_reactive_power",
)
}
#Saving plot
png(filename="Plot4.png",
bg='transparent' #make backround transparent like in example figures
)
plotting4()
dev.off()
setwd('~/ExData_Plotting1')
if (Sys.getlocale('LC_TIME')=='ru_RU.UTF-8'){
# needed to print time axis in english language, tested only on Ubuntu 12.04
Sys.setlocale("LC_TIME", "C")
}
#loading data set which is placed one level upper
data <- read.table('../household_power_consumption.txt',
sep=';',
header=TRUE,
na.strings='?',
as.is=c('Date','Time')) #without this R will convert Date and Time to factor variables
#subset data here to make Date&Time data class converting little bit faster
data <- subset(data,Date %in% c('1/2/2007','2/2/2007'))
#convert Date and Time columns from factor class to time and data classes
data$Time <- strptime(paste(data$Date,data$Time),
format='%d/%m/%Y %H:%M:%S',
tz='GMT')
data$Date <- as.Date(data$Date,format='%d/%m/%Y')
#Plotting
plotting3 <- function(){
plot(data$Time,data$Sub_metering_1,
type='l',
main = "",
xlab="",
ylab="Energy of sub metering",
)
lines(data$Time,data$Sub_metering_2,
col='red')
lines(data$Time,data$Sub_metering_3,
col='blue')
legend('topright',
c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col=c("black","red","blue"),
lty=1
)
}
#Saving plot
png(filename="Plot3.png",
bg='transparent' #make backround transparent like in example figures
)
plotting3()
dev.off()
setwd('~/ExData_Plotting1')
if (Sys.getlocale('LC_TIME')=='ru_RU.UTF-8'){
# needed to print time axis in english language, tested only on Ubuntu 12.04
Sys.setlocale("LC_TIME", "C")
}
#loading data set which is placed one level upper
data <- read.table('../household_power_consumption.txt',
sep=';',
header=TRUE,
na.strings='?',
as.is=c('Date','Time')) #without this R will convert Date and Time to factor variables
#subset data here to make Date&Time data class converting little bit faster
data <- subset(data,Date %in% c('1/2/2007','2/2/2007'))
#convert Date and Time columns from factor class to time and data classes
data$Time <- strptime(paste(data$Date,data$Time),
format='%d/%m/%Y %H:%M:%S',
tz='GMT')
data$Date <- as.Date(data$Date,format='%d/%m/%Y')
#Plotting
plotting2 <- function(){
plot(data$Time,
data$Global_active_power,
type='l',
main = "",
xlab="",
ylab="Global Active Power (kilowatts)",
)
}
#Saving plot
png(filename="Plot2.png",
bg='transparent' #make backround transparent like in example figures
)
plotting2()
dev.off()
setwd('~/ExData_Plotting1')
if (Sys.getlocale('LC_TIME')=='ru_RU.UTF-8'){
# needed to print time axis in english language, tested only on Ubuntu 12.04
Sys.setlocale("LC_TIME", "C")
}
#loading data set which is placed one level upper
data <- read.table('../household_power_consumption.txt',
sep=';',
header=TRUE,
na.strings='?',
as.is=c('Date','Time')) #without this R will convert Date and Time to factor variables
#subset data here to make Date&Time data class converting little bit faster
data <- subset(data,Date %in% c('1/2/2007','2/2/2007'))
#convert Date and Time columns from factor class to time and data classes
data$Time <- strptime(paste(data$Date,data$Time),
format='%d/%m/%Y %H:%M:%S',
tz='GMT')
data$Date <- as.Date(data$Date,format='%d/%m/%Y')
#Plotting
plotting1 <- function(){
hist(data$Global_active_power,
col='red',
main = "Global Active Power",
xlab="Global Active Power (kilowatts)",
ylab="Frequency",
)
}
#Saving plot
png(filename="~/Plot1.png",
bg='transparent' #make backround transparent like in example figures
)
plotting1()
dev.off()
...
setwd('~')
source(..., chdir = T)
if (Sys.getlocale('LC_TIME')=='ru_RU.UTF-8'){
# needed to print time axis in english language, tested only on Ubuntu 12.04
Sys.setlocale("LC_TIME", "C")
}
#loading data set which is placed one level upper
data <- read.table('../household_power_consumption.txt',
sep=';',
header=TRUE,
na.strings='?',
as.is=c('Date','Time')) #without this R will convert Date and Time to factor variables
#subset data here to make Date&Time data class converting little bit faster
data <- subset(data,Date %in% c('1/2/2007','2/2/2007'))
#convert Date and Time columns from factor class to time and data classes
data$Time <- strptime(paste(data$Date,data$Time),
format='%d/%m/%Y %H:%M:%S',
tz='GMT')
data$Date <- as.Date(data$Date,format='%d/%m/%Y')
#Plotting
plotting1 <- function(){
hist(data$Global_active_power,
col='red',
main = "Global Active Power",
xlab="Global Active Power (kilowatts)",
ylab="Frequency",
)
}
#Saving plot
png(filename="Plot1.png",
bg='transparent' #make backround transparent like in example figures
)
plotting1()
dev.off()
source('plot1.R', chdir = T)
fetwd()
getwd()
setwd("~/ExData_Plotting1")
dev.off
if (Sys.getlocale('LC_TIME')=='ru_RU.UTF-8'){
# needed to print time axis in english language, tested only on Ubuntu 12.04
Sys.setlocale("LC_TIME", "C")
}
#loading data set which is placed one level upper
data <- read.table('../household_power_consumption.txt',
sep=';',
header=TRUE,
na.strings='?',
as.is=c('Date','Time')) #without this R will convert Date and Time to factor variables
#subset data here to make Date & Time class converting little bit faster
data <- subset(data,Date %in% c('1/2/2007','2/2/2007'))
#convert Date and Time columns from factor class to time and data classes
data$Time <- strptime(paste(data$Date,data$Time),
format='%d/%m/%Y %H:%M:%S',
tz='GMT')
data$Date <- as.Date(data$Date,format='%d/%m/%Y')
#Plotting
plotting1 <- function(){
hist(data$Global_active_power,
col='red',
main = "Global Active Power",
xlab="Global Active Power (kilowatts)",
ylab="Frequency",
)
}
#Saving plot
png(filename="Plot1.png",
bg='transparent' #make backround transparent like in example figures
)
plotting1()
dev.off()
utils::read.table
plot(data$Time,data$Sub_metering_1,
type='l',
main = "",
xlab="",
ylab="Energy of sub metering",
)
lines(data$Time,data$Sub_metering_2,
col='red')
lines(data$Time,data$Sub_metering_3,
col='blue')
legend('topright',
c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col=c("black","red","blue"),
lty=1,
bty = "n"
)
plot.window(xlim=range(x1),ylim=range(y1))
data[,grep('Sub_metering',names(data),value=T)]
range(data[,grep('Sub_metering',names(data),value=T)])
plot.window(xlim=range(data[,grep('Sub_metering',names(data),value=T)]),ylim=range(data$Time))
range(data$Time)
plot.window(ylim=range(data[,grep('Sub_metering',names(data),value=T)]),xlim=range(data$Time))
class(data$Time)
plot.window(ylim=range(data[,grep('Sub_metering',names(data),value=T)]),xlim=range(as.POSIXct(data$Time)))
lines(data$Time,data$Sub_metering_3,
col='blue')
plot(data$Time,data$Sub_metering_2,
type='l',
main = "",
xlab="",
ylab="Energy of sub metering",
)
lines(data$Time,data$Sub_metering_1,
col='red')
lines(data$Time,data$Sub_metering_3,
col='blue')
legend('topright',
c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col=c("black","red","blue"),
lty=1,
bty = "n"
)
plot(data$Time,data$Sub_metering_1,
type='l',
main = "",
xlab="",
ylab="Energy of sub metering",
)
plot(data$Time,data$Sub_metering_2,
type='l',
main = "",
xlab="",
ylab="Energy of sub metering",
)
lines(data$Time,data$Sub_metering_1,
col='red')
lines(data$Time,data$Sub_metering_3,
col='blue')
legend('topright',
c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col=c("black","red","blue"),
lty=1,
bty = "n"
)
plot(data$Time,data$Sub_metering_1,
type='l',
main = "",
xlab="",
ylab="Energy of sub metering",
)
plot()
plot(0)
plot(...)
source('~/ExData_Plotting1/plot1.R')
source('~/ExData_Plotting1/plot1.R')
source('~/ExData_Plotting1/plot2.R')
source('~/ExData_Plotting1/plot3.R')
source('~/.active-rstudio-document')
source('~/ExData_Plotting1/plot2.R')
install_from_swirl("Statistical Inference")
swirl()
library('swirl')
install_from_swirl("Statistical Inference")
swirl()
bey()
source('~/ExData_Plotting1/plot4.R')
source('~/.active-rstudio-document')
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
ds <-as.Date("1969-01-01")
ds2 <-as.Date("1969-01-01")
d2 <-as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 ,- as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
ckass(t2)
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units='days')
lm(child ~ parent,galton)
fit <- lm(child ~ parent,galton)
sqrt(sum(fit$residuals^2)/(926))
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(fit)
1-sRes/sTot
summary(fit)$r.squared
cor(galton$parent,galton$child)^2
w <- c(2, 1, 3, 1)
x <- c(0.18, -1.54, 0.42, 0.95)
sum(x*w)
sum(x*w)/sum(w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
summary(lm(y~x))
data(mtcars)
summary(lm(mpg~weight, mtcars))
summary(lm(mpg~weight, data=mtcars))
names(mtcars)
mtcars$wt
mtcars
str(mtcars)
help(mtcars)
summary(lm(mpg~wt, data=mtcars))
summary(lm(wt~mpg, data=mtcars))
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean(x)
(x[1]-mean(x))/std(x)
(x[1]-mean(x))/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
summary(lm(y~x))
mean(c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
summary(lm(y~x-1))
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sum(x*w)/sum(w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
summary(lm(y~x-1))
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv,stringsAsFactors=FALSE)
dim(mydf)
head(df)
head(mydf)
library(dplyr)
packageVersion('dplyr')
cran <- tbl_df(mydf)
rm('mydf')
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.1.1", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size>100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20,size_gb = size_mb/2^10)
mutate(cran3, correct_size=size+1000)
summarize(cran, avg_bytes = mean(size))
